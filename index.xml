<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ZsmHub - Blog</title>
    <link>https://zsmhub.github.io/</link>
    <description>Recent content on ZsmHub - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>ZsmHub</copyright>
    <lastBuildDate>Wed, 01 Jan 2020 16:30:02 +0800</lastBuildDate>
    
	<atom:link href="https://zsmhub.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang 学习——数组指针和指针数组的区别</title>
      <link>https://zsmhub.github.io/post/golang/golang%E5%AD%A6%E4%B9%A0%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E5%92%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 05 May 2020 14:13:30 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/golang%E5%AD%A6%E4%B9%A0%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E5%92%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>Golang中数组指针和指针数组区别 区别二者，字面上只看后两个字即可： 数组指针 ：它是一个指针，但是数据类型为数组，或者说指向数组 指针数组 ：它</description>
    </item>
    
    <item>
      <title>理解并发与并行</title>
      <link>https://zsmhub.github.io/post/%E5%90%8E%E7%AB%AF/%E7%90%86%E8%A7%A3%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C/</link>
      <pubDate>Mon, 04 May 2020 18:15:11 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/%E5%90%8E%E7%AB%AF/%E7%90%86%E8%A7%A3%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C/</guid>
      <description>并发与并行 例子 你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。 你吃饭吃到一半，电话来了，你停了下来接了</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://zsmhub.github.io/post/%E5%8D%9A%E5%AE%A2/hugo/</link>
      <pubDate>Sun, 03 May 2020 20:45:07 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/%E5%8D%9A%E5%AE%A2/hugo/</guid>
      <description>Hugo 是什么 静态网站生成器 Hugo只有一个二进制文件（比如Windows里只是一个hugo.exe） Hugo可以将你写好的MarkDown格式的</description>
    </item>
    
    <item>
      <title>大数据表设计方案</title>
      <link>https://zsmhub.github.io/post/database/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sat, 25 Apr 2020 23:06:53 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/database/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88/</guid>
      <description>方案 当数据总量或者并发数很大的时候，我们通常选择NoSQL存储产品来存储数据，但常见的NoSQL产品都没有提供自增列的功能，因此通常要借助外</description>
    </item>
    
    <item>
      <title>即时通讯-心跳机制</title>
      <link>https://zsmhub.github.io/post/im/%E5%BF%83%E8%B7%B3%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 17 Apr 2020 20:56:26 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/im/%E5%BF%83%E8%B7%B3%E6%9C%BA%E5%88%B6/</guid>
      <description>作为即时通讯应用，心跳机制是其网络通信技术底层中非常重要的一环，有没有心跳机制、心跳机制的算法实现好坏，都将直接影响即时通讯应用在应用层的表</description>
    </item>
    
    <item>
      <title>IM 基础知识</title>
      <link>https://zsmhub.github.io/post/im/im%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Thu, 16 Apr 2020 20:53:50 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/im/im%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>IM 消息可靠性及一致性的解决方案 参考文章 对于 IM 系统消息可靠性及一致性问题，通过消息重发机制保证消息成功被服务端接收，通过会话记录检查保证收取消</description>
    </item>
    
    <item>
      <title>NSQ-分布式实时消息平台</title>
      <link>https://zsmhub.github.io/post/im/nsq/</link>
      <pubDate>Wed, 15 Apr 2020 20:50:45 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/im/nsq/</guid>
      <description>NSQ 简介 NSQ是一个基于Go语言的分布式实时消息平台，它基于MIT开源协议发布，由bitly公司开源出来的一款简单易用的消息中间件。 NSQ 是实时的</description>
    </item>
    
    <item>
      <title>数据库基础知识</title>
      <link>https://zsmhub.github.io/post/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Fri, 03 Apr 2020 22:45:33 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>一、基础知识 表存储引擎必须用InnoDB 字符集必须使用utf8mb4 （utf8不是真utf8） 禁止使用存储过程、视图、触发器、Event 命名</description>
    </item>
    
    <item>
      <title>Go 基础知识</title>
      <link>https://zsmhub.github.io/post/golang/go%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Sun, 15 Mar 2020 17:46:46 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>Go 简介 Go 语言起源 2007 年，并于 2009 年正式对外发布，其是谷歌公司的一个开源项目。Go 语言并不是凭空而造的，而是和 C++、Java 和 C# 一样属于 C 系。 Go</description>
    </item>
    
    <item>
      <title>Navigation</title>
      <link>https://zsmhub.github.io/navigation/</link>
      <pubDate>Wed, 01 Jan 2020 16:30:02 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/navigation/</guid>
      <description>学习ing golang-高级编程 7天用Go从零实现系列 Swoole 从入门到实战 如何成为黑客 阅读平台 Medium 简书 PHP编程之道 社区平台 LearnKu 社区 IM 开发者社区 segmentfault 开源</description>
    </item>
    
    <item>
      <title>接口对接安全性方案</title>
      <link>https://zsmhub.github.io/post/web%E5%AE%89%E5%85%A8/%E6%8E%A5%E5%8F%A3%E5%AF%B9%E6%8E%A5%E5%AE%89%E5%85%A8%E6%80%A7%E6%96%B9%E6%A1%88/</link>
      <pubDate>Wed, 25 Dec 2019 21:44:01 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/web%E5%AE%89%E5%85%A8/%E6%8E%A5%E5%8F%A3%E5%AF%B9%E6%8E%A5%E5%AE%89%E5%85%A8%E6%80%A7%E6%96%B9%E6%A1%88/</guid>
      <description>接口对接安全性方案 鉴权（authentication）是指验证用户是否拥有访问系统的权利。 建立访问IP白名单 可以在nginx上配置只允许某些</description>
    </item>
    
    <item>
      <title>算法时间复杂度</title>
      <link>https://zsmhub.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Wed, 04 Dec 2019 21:51:34 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>时间复杂度基础概念 在计算机科学中，算法的时间复杂度（Time complexity）是一个函数，它定性描述该算法的运行时间。这是一个代表算法输</description>
    </item>
    
    <item>
      <title>时间单位</title>
      <link>https://zsmhub.github.io/post/other/%E6%97%B6%E9%97%B4%E5%8D%95%E4%BD%8D/</link>
      <pubDate>Sat, 23 Nov 2019 21:40:00 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/other/%E6%97%B6%E9%97%B4%E5%8D%95%E4%BD%8D/</guid>
      <description>秒、毫秒、微秒、纳秒 10位数的时间戳是以 秒 为单位； 13位数的时间戳是以 毫秒 为单位； 16位数的时间戳是以 微秒 为单位； 19位数的时间戳是以 纳秒 为</description>
    </item>
    
    <item>
      <title>Git 基础知识</title>
      <link>https://zsmhub.github.io/post/other/git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Wed, 02 Oct 2019 21:05:31 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/other/git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>Git 简介 版本控制工具，分布式版本控制系统 git commit 注释标记 feat: 添加新特性 fix: 修复bug refactor: 代码重构，没有加新功能或者修复bug merge: 分支合并，解决冲突 docs: 仅仅修</description>
    </item>
    
    <item>
      <title>Laravel 定时任务与常驻进程</title>
      <link>https://zsmhub.github.io/post/php/laravel%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%B8%B8%E9%A9%BB%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Wed, 04 Sep 2019 14:28:22 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/laravel%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%B8%B8%E9%A9%BB%E8%BF%9B%E7%A8%8B/</guid>
      <description>任务调度功能 Laravel 命令行调度器允许你在 Laravel 中对命令调度进行清晰流畅的定义。且使用这个任务调度器时，你只需要在你的服务器上创建单个 Cron 入口接口。你的任</description>
    </item>
    
    <item>
      <title>Laravel 常用组件</title>
      <link>https://zsmhub.github.io/post/php/laravel%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Thu, 01 Aug 2019 14:15:47 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/laravel%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/</guid>
      <description>dingo/api dingo/api 是一个 Lumen 和 Laravel 都可用的 RestFul 工具包，帮助我们快速的开始构建 RestFul Api。 1 2 composer require dingo/api php artisan vendor:publish --provider=&amp;#34;Dingo\Api\Provider\LaravelServiceProvider&amp;#34; 注意点： 由于路由被 DingoApi 接管了，如果将来部署上线后你需要缓存</description>
    </item>
    
    <item>
      <title>Laravel 基础知识</title>
      <link>https://zsmhub.github.io/post/php/laravel%E5%85%A5%E9%97%A8/</link>
      <pubDate>Thu, 01 Aug 2019 13:50:49 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/laravel%E5%85%A5%E9%97%A8/</guid>
      <description>php 框架运行的核心三步 从入口进入 index.php 解析 url，匹配路由 根据路由，调用控制器，渲染视图 tip: 在第一步到第二步之间，会有更多的操作。比如自动加载，容器</description>
    </item>
    
    <item>
      <title>高并发处理</title>
      <link>https://zsmhub.github.io/post/%E5%90%8E%E7%AB%AF/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86/</link>
      <pubDate>Sat, 06 Jul 2019 13:32:31 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/%E5%90%8E%E7%AB%AF/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86/</guid>
      <description>高并发之问题描述 某天A君突然发现自己的接口请求量突然涨到之前的10倍，没多久该接口几乎不可使用，并引发连锁反应导致整个系统崩溃。如何应对这种</description>
    </item>
    
    <item>
      <title>PHP 常用函数</title>
      <link>https://zsmhub.github.io/post/php/php%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 03 Jun 2019 19:02:58 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/php%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</guid>
      <description>时间函数 常用代码 1 2 3 4 5 6 7 8 9 10 11 date_default_timezone_set(&amp;#39;PRC&amp;#39;); //默认时区 echo &amp;#34;今天:&amp;#34;,date(&amp;#34;Y-m-d&amp;#34;,time()),</description>
    </item>
    
    <item>
      <title>持续集成工作流</title>
      <link>https://zsmhub.github.io/post/%E5%90%8E%E7%AB%AF/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
      <pubDate>Mon, 27 May 2019 13:41:28 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/%E5%90%8E%E7%AB%AF/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
      <description>互联网软件的开发和发布，已经形成了一套标准流程。 持续集成 持续集成（Continuous integration，简称CI）指的是，频繁地（一天</description>
    </item>
    
    <item>
      <title>Composer</title>
      <link>https://zsmhub.github.io/post/php/composer/</link>
      <pubDate>Wed, 03 Apr 2019 21:50:58 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/composer/</guid>
      <description>常用 composer 扩展包 常见的 Token 是存储在数据库中的，在服务器端进行数据库查询，并比对 Token 是否合法。JWT 的意义是让 Token 和 Payload 加密后存储于用户端，服务端只需要解</description>
    </item>
    
    <item>
      <title>PHP 面向对象编程</title>
      <link>https://zsmhub.github.io/post/php/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sat, 09 Mar 2019 13:22:34 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</guid>
      <description>PHP开发中常用的代码复用有继承(extend)、多态(interface)、trait（性状）。 OOP（Object Oriented Programmin</description>
    </item>
    
    <item>
      <title>Opcache与Opcode</title>
      <link>https://zsmhub.github.io/post/php/opcache%E4%B8%8Eopcode/</link>
      <pubDate>Sat, 23 Feb 2019 13:10:09 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/opcache%E4%B8%8Eopcode/</guid>
      <description>相关文章 Opcode是啥以及如何使用好Opcache 啥是Opcache Opcache 的前生是 Optimizer+ ，它是PHP的官方公司 Zend 开发的一款闭源但可以免费使用的 PHP 优</description>
    </item>
    
    <item>
      <title>Memcached</title>
      <link>https://zsmhub.github.io/post/database/memcached/</link>
      <pubDate>Fri, 04 Jan 2019 22:43:26 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/database/memcached/</guid>
      <description>基础信息 telnet memcached 11211 // 连接memcached服务器 flush_all // 清除全部缓存 delete key // 清除某个key的缓存 注意 memcached在存储数组时，PHP的memca</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://zsmhub.github.io/post/database/redis/</link>
      <pubDate>Thu, 03 Jan 2019 22:38:49 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/database/redis/</guid>
      <description>基础信息 Redis是一个基于内存的高效的非关系型数据库，占用端口：6379 配置文件路径：/usr/local/etc/redis.conf r</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://zsmhub.github.io/about/</link>
      <pubDate>Tue, 01 Jan 2019 17:51:03 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/about/</guid>
      <description>版权声明 目前，ZsmHub Blog 以 CC BY-NC-SA 4.0 为许可协议。 协议规定本博客有三项保留权利： 知识共享署名（即转载时需带上原作者的署名） 非商业性使用 相同方式</description>
    </item>
    
    <item>
      <title>PHP 基础知识</title>
      <link>https://zsmhub.github.io/post/php/php%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Tue, 01 Jan 2019 10:37:43 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/php%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>操作符 两个相连的冒号: 范围解析操作符:: 执行操作符` getenv 获取一个系统环境变量的值 php设置错误信息输出级别： 1 2 error_reporting(-1); //报告所有 PHP 错误 ini_set(&amp;#39;display_errors&amp;#39;, 1); //打</description>
    </item>
    
  </channel>
</rss>