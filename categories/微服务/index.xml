<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微服务 on ZsmHub - Blog</title>
    <link>https://zsmhub.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
    <description>Recent content in 微服务 on ZsmHub - Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>ZsmHub</copyright>
    <lastBuildDate>Thu, 22 Jul 2021 09:09:30 +0800</lastBuildDate>
    <atom:link href="https://zsmhub.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分布式事务</title>
      <link>https://zsmhub.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Thu, 22 Jul 2021 09:09:30 +0800</pubDate>
      <guid>https://zsmhub.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid>
      <description>&lt;h2 id=&#34;tcc-分布式事务&#34;&gt;TCC 分布式事务&lt;/h2&gt;&#xA;&lt;p&gt;TCC 是 Try、Confirm、Cancel 三个词语的缩写。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;TCC 分为 3 个阶段&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Try 阶段：尝试执行，完成所有业务检查（一致性）, 预留必须业务资源（准隔离性）&lt;/li&gt;&#xA;&lt;li&gt;Confirm 阶段：如果所有分支的 Try 都成功了，则走到 Confirm 阶段。Confirm 真正执行业务，不作任何业务检查，只使用 Try 阶段预留的业务资源&lt;/li&gt;&#xA;&lt;li&gt;Cancel 阶段：如果所有分支的 Try 有一个失败了，则走到 Cancel 阶段。Cancel 释放 Try 阶段预留的业务资源。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;TCC 分布式事务里，有 3 个角色，与经典的 XA 分布式事务一样：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Zero</title>
      <link>https://zsmhub.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/go-zero/</link>
      <pubDate>Fri, 04 Jun 2021 15:43:03 +0800</pubDate>
      <guid>https://zsmhub.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/go-zero/</guid>
      <description>&lt;h2 id=&#34;官方文档&#34;&gt;官方文档&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://go-zero.dev/cn/&#34;&gt;点击前往&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;启动服务&#34;&gt;启动服务&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// API 或 rpc 代码运行&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; project/service/user/cmd/api &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; go run user.go -f etc/user.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h2 id=&#34;rpc调用链建议&#34;&gt;rpc调用链建议&lt;/h2&gt;&#xA;&lt;p&gt;在设计系统时，尽量做到服务之间调用链是单向的，而非循环调用，例如：order服务调用了user服务，而user服务反过来也会调用order的服务， 当其中一个服务启动故障，就会相互影响，进入死循环，你order认为是user服务故障导致的，而user认为是order服务导致的，如果有大量服务存在相互调用链， 则需要考虑服务拆分是否合理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>用 etcd 实现 API 网关</title>
      <link>https://zsmhub.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/api%E7%BD%91%E5%85%B3%E5%AE%9E%E7%8E%B0-etcd/</link>
      <pubDate>Thu, 06 May 2021 11:28:32 +0800</pubDate>
      <guid>https://zsmhub.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/api%E7%BD%91%E5%85%B3%E5%AE%9E%E7%8E%B0-etcd/</guid>
      <description>&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;&#xA;&lt;p&gt;etcd 是一个高可用强一致性的键值仓库，在很多分布式系统架构中得到了广泛的应用，其最经典的使用场景就是服务发现。&lt;/p&gt;&#xA;&lt;p&gt;etcd 的场景默认处理的数据都是系统中的控制数据。所以etcd在系统中的角色不是其他NoSQL产品的替代品，更不能作为应用的主要数据存储。etcd中应该尽量只存储系统中服务的配置信息，对于应用数据只推荐把数据量很小，但是更新和访问频次都很高的数据存储在etcd中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Micro</title>
      <link>https://zsmhub.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/go-micro/</link>
      <pubDate>Fri, 18 Dec 2020 09:30:23 +0800</pubDate>
      <guid>https://zsmhub.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/go-micro/</guid>
      <description>&lt;h2 id=&#34;micro-常用的几个命令&#34;&gt;micro 常用的几个命令&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;micro server //启动服务端&lt;/li&gt;&#xA;&lt;li&gt;micro login //登录服务 user: admin pass: micro&lt;/li&gt;&#xA;&lt;li&gt;micro new XXX //新建服务&lt;/li&gt;&#xA;&lt;li&gt;micro services //服务列表&lt;/li&gt;&#xA;&lt;li&gt;micro run XXX //挂载服务&lt;/li&gt;&#xA;&lt;li&gt;micro status //查看服务状态&lt;/li&gt;&#xA;&lt;li&gt;micro logs XXX //查看XXX服务日志&lt;/li&gt;&#xA;&lt;li&gt;micro service XXX //XXX服务详情&lt;/li&gt;&#xA;&lt;li&gt;micro XXX &amp;ndash;参数=值 //调用XXX服务返回结果&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;学习链接&#34;&gt;学习链接&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/micro/micro&#34;&gt;Micro 框架&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>微服务</title>
      <link>https://zsmhub.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 12 Oct 2020 11:38:53 +0800</pubDate>
      <guid>https://zsmhub.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid>
      <description>&lt;h2 id=&#34;为什么要用微服务&#34;&gt;为什么要用微服务&lt;/h2&gt;&#xA;&lt;p&gt;小项目发展到大项目过程中，出于维护、稳定性等考虑，将一个整体项目分为多个微小服务。&lt;/p&gt;&#xA;&lt;h2 id=&#34;为什么说做好微服务很难&#34;&gt;为什么说做好微服务很难&lt;/h2&gt;&#xA;&lt;p&gt;要想做好微服务，我们需要理解和掌握的知识点非常多，从几个维度上来说：&lt;/p&gt;</description>
    </item>
    <item>
      <title>API Gateway</title>
      <link>https://zsmhub.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/api%E7%BD%91%E5%85%B3/</link>
      <pubDate>Sun, 17 May 2020 20:05:18 +0800</pubDate>
      <guid>https://zsmhub.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/api%E7%BD%91%E5%85%B3/</guid>
      <description>&lt;h2 id=&#34;api-网关简介&#34;&gt;API 网关简介&lt;/h2&gt;&#xA;&lt;p&gt;随着移动互联网的兴起、开放合作思维的盛行，不同终端和第三方开发者都需要大量的接入企业核心业务能力，此时各业务系统将会面临同一系列的问题，例如：如何让调用方快速接入、如何让业务方安全地对外开放能力，如何应对和控制业务洪峰调用等等。于是就诞生了一个隔离企业内部业务系统和外部系统调用的屏障 - API网关，它负责在上层抽象出各业务系统需要的通用功能，例如：鉴权、限流、ACL、降级等。另外随着近年来微服务的流行，API网关已经成为一个微服务架构中的标配组件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Restful、SOAP、RPC、gRPC、SOA、微服务之间的区别</title>
      <link>https://zsmhub.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/restfulsoaprpcsoa%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 16 May 2020 10:41:57 +0800</pubDate>
      <guid>https://zsmhub.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/restfulsoaprpcsoa%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>&lt;h2 id=&#34;restful&#34;&gt;Restful&lt;/h2&gt;&#xA;&lt;p&gt;Restful是一种架构设计风格，提供了设计原则和约束条件，而不是架构，而满足这些约束条件和原则的应用程序或设计就是 Restful架构或服务。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dubbo</title>
      <link>https://zsmhub.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/dubbo/</link>
      <pubDate>Sat, 16 May 2020 10:15:48 +0800</pubDate>
      <guid>https://zsmhub.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/dubbo/</guid>
      <description>&lt;h2 id=&#34;dubbo-简介&#34;&gt;Dubbo 简介&lt;/h2&gt;&#xA;&lt;p&gt;Apache Dubbo (incubating) |ˈdʌbəʊ| 是开源的一款高性能、轻量级的开源 Java RPC 框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
