<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>php on ZsmHub - Blog</title>
    <link>https://zsmhub.github.io/categories/php/</link>
    <description>Recent content in php on ZsmHub - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>ZsmHub</copyright>
    <lastBuildDate>Wed, 02 Sep 2020 16:04:33 +0800</lastBuildDate><atom:link href="https://zsmhub.github.io/categories/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PHP-FPM</title>
      <link>https://zsmhub.github.io/post/php/php-fpm/</link>
      <pubDate>Wed, 02 Sep 2020 16:04:33 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/php-fpm/</guid>
      <description>PHP-FPM CGI是Common Gateway Interface（通用网管协议），用于让交互程序和Web服务器通信的协议。它负责处理URL的请求，启动一个进程，将</description>
    </item>
    
    <item>
      <title>Laravel 如何在预加载中指定查询的字段</title>
      <link>https://zsmhub.github.io/post/php/laravel%E5%A6%82%E4%BD%95%E5%9C%A8%E9%A2%84%E5%8A%A0%E8%BD%BD%E4%B8%AD%E6%8C%87%E5%AE%9A%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%AD%97%E6%AE%B5/</link>
      <pubDate>Tue, 30 Jun 2020 18:30:58 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/laravel%E5%A6%82%E4%BD%95%E5%9C%A8%E9%A2%84%E5%8A%A0%E8%BD%BD%E4%B8%AD%E6%8C%87%E5%AE%9A%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%AD%97%E6%AE%B5/</guid>
      <description>预加载指定列 并不是总需要获取关系的每一列。在这种情况下，Eloquent 允许你为关联指定想要获取的列： 1 2 3 4 $result = User::with(&amp;#39;topics:user_id,body,title&amp;#39;) -&amp;gt;where(&amp;#39;name&amp;#39;, &amp;#39;Summer&amp;#39;) -&amp;gt;get() -&amp;gt;toArray(); 注意：在使用这个</description>
    </item>
    
    <item>
      <title>PHP注释规范</title>
      <link>https://zsmhub.github.io/post/php/php%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83/</link>
      <pubDate>Fri, 08 May 2020 08:51:58 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/php%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83/</guid>
      <description>函数/方法注释规范 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 /** * @param 定义函数或者方法的参数信息 * @return 定义函数或者方法的返回信息 * @throws 指明</description>
    </item>
    
    <item>
      <title>PHP 的一些坑</title>
      <link>https://zsmhub.github.io/post/php/php%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</link>
      <pubDate>Thu, 07 May 2020 16:00:02 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/php%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</guid>
      <description>大小写的坑 mysql5.7 查询不区分大小写。 php7.2 array_diff() 区分大小写，在不区分大小写的情况下取差集，应使用 array_udiff() 和 strcasecmp() 处理 示例：array_udiff([&amp;lsquo;a</description>
    </item>
    
    <item>
      <title>Laravel 定时任务与常驻进程</title>
      <link>https://zsmhub.github.io/post/php/laravel%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%B8%B8%E9%A9%BB%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Wed, 04 Sep 2019 14:28:22 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/laravel%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%B8%B8%E9%A9%BB%E8%BF%9B%E7%A8%8B/</guid>
      <description>任务调度功能 Laravel 命令行调度器允许你在 Laravel 中对命令调度进行清晰流畅的定义。且使用这个任务调度器时，你只需要在你的服务器上创建单个 Cron 入口接口。你的任</description>
    </item>
    
    <item>
      <title>Laravel 常用组件</title>
      <link>https://zsmhub.github.io/post/php/laravel%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Thu, 01 Aug 2019 14:15:47 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/laravel%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/</guid>
      <description>dingo/api dingo/api 是一个 Lumen 和 Laravel 都可用的 RestFul 工具包，帮助我们快速的开始构建 RestFul Api。 1 2 composer require dingo/api php artisan vendor:publish --provider=&amp;#34;Dingo\Api\Provider\LaravelServiceProvider&amp;#34; 注意点： 由于路由被 DingoApi 接管了，如果将来部署上线后你需要缓存</description>
    </item>
    
    <item>
      <title>Laravel 基础知识</title>
      <link>https://zsmhub.github.io/post/php/laravel%E5%85%A5%E9%97%A8/</link>
      <pubDate>Thu, 01 Aug 2019 13:50:49 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/laravel%E5%85%A5%E9%97%A8/</guid>
      <description>php 框架运行的核心三步 从入口进入 index.php 解析 url，匹配路由 根据路由，调用控制器，渲染视图 tip: 在第一步到第二步之间，会有更多的操作。比如自动加载，容器</description>
    </item>
    
    <item>
      <title>PHP 常用函数</title>
      <link>https://zsmhub.github.io/post/php/php%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 03 Jun 2019 19:02:58 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/php%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</guid>
      <description>时间函数 常用代码 1 2 3 4 5 6 7 8 9 10 11 date_default_timezone_set(&amp;#39;PRC&amp;#39;); //默认时区 echo &amp;#34;今天:&amp;#34;,date(&amp;#34;Y-m-d&amp;#34;,time()),</description>
    </item>
    
    <item>
      <title>Composer</title>
      <link>https://zsmhub.github.io/post/php/composer/</link>
      <pubDate>Wed, 03 Apr 2019 21:50:58 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/composer/</guid>
      <description>pear pear: 全称为PHP扩展与应用库(PHP Extension and Application Repository)。为了创建一个类似于Perl CPAN档案的工具 phar: php档案包 Composer 概念：用来管理</description>
    </item>
    
    <item>
      <title>PHP 面向对象编程</title>
      <link>https://zsmhub.github.io/post/php/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sat, 09 Mar 2019 13:22:34 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</guid>
      <description>PHP开发中常用的代码复用有继承(extend)、多态(interface)、trait（性状）。 OOP（Object Oriented Programmin</description>
    </item>
    
    <item>
      <title>Opcache与Opcode</title>
      <link>https://zsmhub.github.io/post/php/opcache%E4%B8%8Eopcode/</link>
      <pubDate>Sat, 23 Feb 2019 13:10:09 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/opcache%E4%B8%8Eopcode/</guid>
      <description>相关文章 Opcode是啥以及如何使用好Opcache 啥是Opcache Opcache 的前生是 Optimizer+ ，它是PHP的官方公司 Zend 开发的一款闭源但可以免费使用的 PHP 优</description>
    </item>
    
    <item>
      <title>PHP 开发环境之 Lnmp</title>
      <link>https://zsmhub.github.io/post/php/lnmp%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Tue, 01 Jan 2019 13:55:39 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/lnmp%E7%9F%A5%E8%AF%86/</guid>
      <description>Install Linux 一键搭建 Lnmp 环境 1 2 # 教程 https://github.com/licess/lnmp OR https://lnmp.org MacOs 一键搭建 Lnmp 环境 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 教程 https://github.com/yeszao/dnmp # 常用命令 $ cd ~/dnmp $ docker-compose build # 镜像构建 $ docker-compose up -d # 创建并且</description>
    </item>
    
    <item>
      <title>PHP 基础知识</title>
      <link>https://zsmhub.github.io/post/php/php%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Tue, 01 Jan 2019 10:37:43 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/php/php%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>PHP手册 点击跳转 查找 php.ini 路径 1 php -i | grep php.ini 操作符 两个相连的冒号: 范围解析操作符:: 执行操作符` getenv 获取一个系统环境变量的值 php设置错误信息输出</description>
    </item>
    
  </channel>
</rss>
