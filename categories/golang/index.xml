<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on ZsmHub - Blog</title>
    <link>https://zsmhub.github.io/categories/golang/</link>
    <description>Recent content in golang on ZsmHub - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>ZsmHub</copyright>
    <lastBuildDate>Wed, 14 Apr 2021 10:42:55 +0800</lastBuildDate><atom:link href="https://zsmhub.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go中的单元测试和基准测试</title>
      <link>https://zsmhub.github.io/post/golang/go%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%92%8C%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 14 Apr 2021 10:42:55 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%92%8C%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</guid>
      <description>TDD Test-Driven Development: 测试驱动开发，是敏捷开发中的一项核心实践和技术，也是一种设计方法论。TDD的原理是在开发功能代码之前，先编写单元测试用例代码，测试代码</description>
    </item>
    
    <item>
      <title>Go 常用案例</title>
      <link>https://zsmhub.github.io/post/golang/%E5%B8%B8%E7%94%A8%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Fri, 08 Jan 2021 17:57:02 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/%E5%B8%B8%E7%94%A8%E6%A1%88%E4%BE%8B/</guid>
      <description>golang中判断两个slice是否相等 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import ( &amp;#34;bytes&amp;#34; &amp;#34;fmt&amp;#34; ) func main() { a := []byte{0, 1, 3, 2} b := []byte{0, 1, 3, 2} c := []byte{1, 1, 3, 2} fmt.Println(bytes.Equal(a, b)) fmt.Println(bytes.Equal(a, c)) }</description>
    </item>
    
    <item>
      <title>Micro</title>
      <link>https://zsmhub.github.io/post/golang/micro/</link>
      <pubDate>Fri, 18 Dec 2020 09:30:23 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/micro/</guid>
      <description>micro 常用的几个命令 micro server //启动服务端 micro login //登录服务 user: admin pass: micro micro new XXX //新建服务 micro services //服务列表 micro run XXX //挂载服务 micro status //查看服务状态 micro logs XXX //</description>
    </item>
    
    <item>
      <title>Go的一些坑</title>
      <link>https://zsmhub.github.io/post/golang/go%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</link>
      <pubDate>Fri, 13 Nov 2020 11:17:51 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</guid>
      <description>代码格式化 golang 自带的 go fmt 默认是是 tab 缩进， 而 goland IDE 的格式化默认是空格缩进【快捷键：option+command+L】 json的坑 []uint8 转 json 后，得不到想</description>
    </item>
    
    <item>
      <title>Go高级知识</title>
      <link>https://zsmhub.github.io/post/golang/go%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Sun, 30 Aug 2020 15:57:50 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%86/</guid>
      <description>代码编译过程 全局变量会进行全局初始化 1 2 type noticeRepository struct{} var Notice = &amp;amp;noticeRepository{} model 层为何不全局实例化？因为 model 层的结构体带有属性，如果全局初始化则 model 层结构体实例的属性可</description>
    </item>
    
    <item>
      <title>Go学习之路</title>
      <link>https://zsmhub.github.io/post/golang/go%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Sun, 30 Aug 2020 15:44:06 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</guid>
      <description>学习文档 Go学习手册 The Way to Go</description>
    </item>
    
    <item>
      <title>Go之并发安全</title>
      <link>https://zsmhub.github.io/post/golang/go%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/</link>
      <pubDate>Sun, 23 Aug 2020 20:57:43 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/</guid>
      <description>分段锁ConcurrentMap，map+读写锁，sync.map的效率测试 原文：go 分段锁ConcurrentMap，map+读写锁，sy</description>
    </item>
    
    <item>
      <title>GoAdmin</title>
      <link>https://zsmhub.github.io/post/golang/goadmin/</link>
      <pubDate>Tue, 18 Aug 2020 16:40:37 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/goadmin/</guid>
      <description>准备工作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 用命令安装扩展 go get github.com/GoAdminGroup/go-admin/adm # 根据指示填写就可以初始化一个项目模板 adm init -l cn # 执行以下命令运行： &amp;gt; make serve # 访问</description>
    </item>
    
    <item>
      <title>Echo 框架</title>
      <link>https://zsmhub.github.io/post/golang/%E6%A1%86%E6%9E%B6-echo%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Sun, 26 Jul 2020 09:17:00 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/%E6%A1%86%E6%9E%B6-echo%E6%A1%86%E6%9E%B6/</guid>
      <description>Echo 入门示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package main import ( &amp;#34;net/http&amp;#34; &amp;#34;github.com/labstack/echo/v4&amp;#34; &amp;#34;github.com/labstack/echo/v4/middleware&amp;#34; ) func main() { // Echo instance e := echo.New() // Middleware e.Use(middleware.Logger()) e.Use(middleware.Recover()) // Routes e.GET(&amp;#34;/&amp;#34;, hello) // Start server e.Logger.Fatal(e.Start(&amp;#34;:1323&amp;#34;)) } // Handler func hello(c echo.Context) error {</description>
    </item>
    
    <item>
      <title>Go切片详解</title>
      <link>https://zsmhub.github.io/post/golang/go%E5%88%87%E7%89%87%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 08 Jul 2020 09:40:36 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E5%88%87%E7%89%87%E8%AF%A6%E8%A7%A3/</guid>
      <description>前言 通过上一篇博文，我们学习了数组的使用，但是数组有一个致命的缺陷，那就是大小固定，这个特性并不能满足我们平时的开发需求，所以Go的切片由此</description>
    </item>
    
    <item>
      <title>NSQ-分布式实时消息处理平台</title>
      <link>https://zsmhub.github.io/post/golang/nsq-%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9E%E6%97%B6%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E5%B9%B3%E5%8F%B0/</link>
      <pubDate>Sun, 28 Jun 2020 10:50:45 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/nsq-%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9E%E6%97%B6%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E5%B9%B3%E5%8F%B0/</guid>
      <description>NSQ 简介 NSQ 是一个基于 Go 语言的分布式实时消息处理平台，它基于 MIT 开源协议发布，由 bitly 公司开源出来的一款简单易用的消息中间件。其设计的目的是用来大规模</description>
    </item>
    
    <item>
      <title>Go defer 使用</title>
      <link>https://zsmhub.github.io/post/golang/go%E4%B9%8Bdefer%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 30 May 2020 09:02:27 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E4%B9%8Bdefer%E4%BD%BF%E7%94%A8/</guid>
      <description>golang defer 这个使用的执行流程一直很绕，所以决定写一篇文记录一下。 规则一：当defer被声明时，其参数就会被实时解析 案例一 1 2 3 4 5 6 7 8 9 10 11 12 13</description>
    </item>
    
    <item>
      <title>Go 常用库</title>
      <link>https://zsmhub.github.io/post/golang/go%E5%B8%B8%E7%94%A8%E5%BA%93/</link>
      <pubDate>Tue, 26 May 2020 16:54:52 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E5%B8%B8%E7%94%A8%E5%BA%93/</guid>
      <description>标准库 time 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 // 获取当前时间，这是个奇葩,必须</description>
    </item>
    
    <item>
      <title>Go ELK 日志收集方案</title>
      <link>https://zsmhub.github.io/post/golang/go%E4%B9%8Belk%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sat, 23 May 2020 14:51:21 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E4%B9%8Belk%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E6%96%B9%E6%A1%88/</guid>
      <description>ELK 简介 对于日志来说，最常见的需求就是收集、存储、查询、展示，开源社区正好有相对应的开源项目 elasticsearch（存储+搜索）, logs</description>
    </item>
    
    <item>
      <title>Go Json 技巧</title>
      <link>https://zsmhub.github.io/post/golang/go%E4%B9%8Bjson%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Tue, 12 May 2020 21:51:25 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E4%B9%8Bjson%E6%8A%80%E5%B7%A7/</guid>
      <description>omitempty 忽略 struct 空字段，当字段的值为空值的时候，它不会出现在JSON数据中. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) type User struct { Email string `json:&amp;#34;email&amp;#34;` Password string</description>
    </item>
    
    <item>
      <title>Go 开发遇到的性能问题</title>
      <link>https://zsmhub.github.io/post/golang/go%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 09 May 2020 14:32:23 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/</guid>
      <description>原生 json 包效率低 原因 原生 json 包主要是用到了reflect，所以比较慢，推荐优先使用 json-iterator 包解析 json。 代码分析 测试环境：macbook pro macos Go 版本:</description>
    </item>
    
    <item>
      <title>Go 性能分析工具</title>
      <link>https://zsmhub.github.io/post/golang/go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 08 May 2020 14:26:32 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</guid>
      <description>一、即时效能分析工具 Pyroscope 分析服务器中央处理器 CPU 的利用率 即時效能分析工具 Pyroscope Pyroscope文档 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24</description>
    </item>
    
    <item>
      <title>Go 数组指针和指针数组的区别</title>
      <link>https://zsmhub.github.io/post/golang/go%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E5%92%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 05 May 2020 14:13:30 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E5%92%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>Golang中数组指针和指针数组区别 区别二者，字面上只看后两个字即可： 数组指针 ：它是一个指针，但是数据类型为数组，或者说指向数组 指针数组 ：它</description>
    </item>
    
    <item>
      <title>Iris 框架</title>
      <link>https://zsmhub.github.io/post/golang/%E6%A1%86%E6%9E%B6-iris%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Wed, 01 Apr 2020 22:02:25 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/%E6%A1%86%E6%9E%B6-iris%E6%A1%86%E6%9E%B6/</guid>
      <description>Iris 简介 Iris 是一个拥有 MVC 架构模式的 Go Web 框架。 Iris 以简单而强大的api而闻名。 除了 Iris 为您提供的低级访问权限。 Iris 为您提供构建面向服务的应用程序的结构。</description>
    </item>
    
    <item>
      <title>Go 基础知识</title>
      <link>https://zsmhub.github.io/post/golang/go%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Sun, 15 Mar 2020 17:46:46 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>Go 简介 Go 语言起源 2007 年，并于 2009 年正式对外发布，其是谷歌公司的一个开源项目。Go 语言并不是凭空而造的，而是和 C++、Java 和 C# 一样属于 C 系。 Go</description>
    </item>
    
  </channel>
</rss>
