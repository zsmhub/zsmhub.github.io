<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on ZsmHub - Blog</title>
    <link>https://zsmhub.github.io/tags/golang/</link>
    <description>Recent content in golang on ZsmHub - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>ZsmHub</copyright>
    <lastBuildDate>Mon, 24 Jul 2023 11:12:57 +0800</lastBuildDate><atom:link href="https://zsmhub.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>框架 Goframe</title>
      <link>https://zsmhub.github.io/post/golang/%E6%A1%86%E6%9E%B6-goframe/</link>
      <pubDate>Mon, 24 Jul 2023 11:12:57 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/%E6%A1%86%E6%9E%B6-goframe/</guid>
      <description>官方文档</description>
    </item>
    
    <item>
      <title>Go之GORM</title>
      <link>https://zsmhub.github.io/post/golang/go%E4%B9%8Bgorm/</link>
      <pubDate>Fri, 02 Sep 2022 17:14:30 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E4%B9%8Bgorm/</guid>
      <description>GORM 设置某一字段为NULL：db.Model(&amp;amp;foo).Where(&amp;ldquo;id=xxx&amp;rdquo;).Updates(ma</description>
    </item>
    
    <item>
      <title>Go语言环境安装及如何使用Go多版本（Mac）</title>
      <link>https://zsmhub.github.io/post/golang/go%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8go%E5%A4%9A%E7%89%88%E6%9C%ACmac/</link>
      <pubDate>Wed, 06 Jul 2022 14:41:22 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8go%E5%A4%9A%E7%89%88%E6%9C%ACmac/</guid>
      <description>go环境的卸载 pkg方式安装go？ 删除/usr/local下的go目录即可 1 sudo rm -rf /usr/local/go brew方式安装go? 1 brew uninstall go@1.14 使用brew安装 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>依赖注入</title>
      <link>https://zsmhub.github.io/post/golang/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Thu, 05 May 2022 18:03:19 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</guid>
      <description>go.uber.org/dig 依赖注入，抽象接口，依赖于抽象接口，而不依赖于具体的对象，实现接口的相互依赖。（可解决同级包的循环引用问题） 引用包：go.uber.org</description>
    </item>
    
    <item>
      <title>Go 常用案例</title>
      <link>https://zsmhub.github.io/post/golang/%E5%B8%B8%E7%94%A8%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Fri, 08 Jan 2021 17:57:02 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/%E5%B8%B8%E7%94%A8%E6%A1%88%E4%BE%8B/</guid>
      <description>golang中判断两个slice是否相等 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import ( &amp;#34;bytes&amp;#34; &amp;#34;fmt&amp;#34; ) func main() { a := []byte{0, 1, 3, 2} b := []byte{0, 1, 3, 2} c := []byte{1, 1, 3, 2} fmt.Println(bytes.Equal(a, b)) fmt.Println(bytes.Equal(a, c)) } 计算</description>
    </item>
    
    <item>
      <title>Go高级知识</title>
      <link>https://zsmhub.github.io/post/golang/go%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Sun, 30 Aug 2020 15:57:50 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%86/</guid>
      <description>代码编译过程 全局变量会进行全局初始化 1 2 type noticeRepository struct{} var Notice = &amp;amp;noticeRepository{} model 层为何不全局实例化？因为 model 层的结构体带有属性，如果全局初始化则 model 层结构体实例的属性可</description>
    </item>
    
    <item>
      <title>GoAdmin</title>
      <link>https://zsmhub.github.io/post/golang/goadmin/</link>
      <pubDate>Tue, 18 Aug 2020 16:40:37 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/goadmin/</guid>
      <description>准备工作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 访问并登陆： - 登陆：http://127.0.0.1:9033/admin/login - 账号：ad</description>
    </item>
    
    <item>
      <title>Echo 框架</title>
      <link>https://zsmhub.github.io/post/golang/%E6%A1%86%E6%9E%B6-echo%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Sun, 26 Jul 2020 09:17:00 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/%E6%A1%86%E6%9E%B6-echo%E6%A1%86%E6%9E%B6/</guid>
      <description>官方文档 Echo 入门示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 package main import ( &amp;#34;net/http&amp;#34; &amp;#34;github.com/labstack/echo/v4&amp;#34; &amp;#34;github.com/labstack/echo/v4/middleware&amp;#34; ) func main() { // Echo instance e := echo.New() // Middleware e.Use(middleware.Logger()) e.Use(middleware.Recover()) // Routes e.GET(&amp;#34;/&amp;#34;, hello) // Start server</description>
    </item>
    
    <item>
      <title>Go defer 使用</title>
      <link>https://zsmhub.github.io/post/golang/go%E4%B9%8Bdefer%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 30 May 2020 09:02:27 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E4%B9%8Bdefer%E4%BD%BF%E7%94%A8/</guid>
      <description>golang defer 这个使用的执行流程一直很绕，所以决定写一篇文记录一下。 规则一：当defer被声明时，其参数就会被实时解析 案例一 1 2 3 4 5 6 7 8 9 10 11 12 13</description>
    </item>
    
    <item>
      <title>Go 常用库</title>
      <link>https://zsmhub.github.io/post/golang/go%E5%B8%B8%E7%94%A8%E5%BA%93/</link>
      <pubDate>Tue, 26 May 2020 16:54:52 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E5%B8%B8%E7%94%A8%E5%BA%93/</guid>
      <description>标准库 time 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66</description>
    </item>
    
    <item>
      <title>Go 数组指针和指针数组的区别</title>
      <link>https://zsmhub.github.io/post/golang/go%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E5%92%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 05 May 2020 14:13:30 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/go%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E5%92%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>Golang中数组指针和指针数组区别 区别二者，字面上只看后两个字即可： 数组指针 ：它是一个指针，但是数据类型为数组，或者说指向数组 指针数组 ：它</description>
    </item>
    
    <item>
      <title>Iris 框架</title>
      <link>https://zsmhub.github.io/post/golang/%E6%A1%86%E6%9E%B6-iris%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Wed, 01 Apr 2020 22:02:25 +0800</pubDate>
      
      <guid>https://zsmhub.github.io/post/golang/%E6%A1%86%E6%9E%B6-iris%E6%A1%86%E6%9E%B6/</guid>
      <description>官方文档 Iris 简介 Iris 是一个拥有 MVC 架构模式的 Go Web 框架。 Iris 以简单而强大的api而闻名。 除了 Iris 为您提供的低级访问权限。 Iris 为您提供构建面向服务的应用程序</description>
    </item>
    
  </channel>
</rss>
