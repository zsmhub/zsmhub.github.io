<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Http on ZsmHub - Blog</title>
    <link>https://zsmhub.github.io/tags/http/</link>
    <description>Recent content in Http on ZsmHub - Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>ZsmHub</copyright>
    <lastBuildDate>Wed, 25 May 2022 09:36:54 +0800</lastBuildDate>
    <atom:link href="https://zsmhub.github.io/tags/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Http客户端</title>
      <link>https://zsmhub.github.io/post/golang/http%E5%AE%A2%E6%88%B7%E7%AB%AF/</link>
      <pubDate>Wed, 28 Jul 2021 10:03:21 +0800</pubDate>
      <guid>https://zsmhub.github.io/post/golang/http%E5%AE%A2%E6%88%B7%E7%AB%AF/</guid>
      <description>&lt;h2 id=&#34;理解-timeout&#34;&gt;理解 timeout&lt;/h2&gt;&#xA;&lt;p&gt;timeout 又可以细分为 connect timeout、read timeout、write timeout。而 read timeout 和 write timeout 必须是在 connect 之后才能发生。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ReadTimeout的时间计算是从连接被接受(accept)到request body完全被读取(如果你不读取body，那么时间截止到读完header为止)&lt;/li&gt;&#xA;&lt;li&gt;WriteTimeout的时间计算正常是从request header的读取结束开始，到response write结束为止 (也就是ServeHTTP方法的生命周期)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;http-vs-fasthttp&#34;&gt;http vs fasthttp&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fasthttp 使用 tcp 做长连接，使用连接池复用连接&lt;/li&gt;&#xA;&lt;li&gt;net/http 是短连接，用完即断开连接&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;常见问题&#34;&gt;常见问题&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;golang http context deadline exceeded (client.timeout exceeded while awaiting headers)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Http</title>
      <link>https://zsmhub.github.io/post/%E5%90%8E%E7%AB%AF/http/</link>
      <pubDate>Thu, 13 May 2021 09:23:19 +0800</pubDate>
      <guid>https://zsmhub.github.io/post/%E5%90%8E%E7%AB%AF/http/</guid>
      <description>&lt;h2 id=&#34;http状态码&#34;&gt;http状态码&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;优雅地使用 301&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1762070&#34;&gt;搞懂 HTTP 重定向 - 如何优雅地使用 301&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;浏览器收到 301永久重定向 后，认为这是一个可以缓存的资源，下次请求该链接是就不再向服务器发起请求。&lt;/p&gt;</description>
    </item>
    <item>
      <title>http和https</title>
      <link>https://zsmhub.github.io/post/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/http%E5%92%8Chttps/</link>
      <pubDate>Thu, 29 Oct 2020 09:36:54 +0800</pubDate>
      <guid>https://zsmhub.github.io/post/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/http%E5%92%8Chttps/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://zsmhub.github.io/images/2020/QQ20201029-093740.png&#34; alt=&#34;HTTP的通信技术发展史&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;网络传输&#34;&gt;网络传输&lt;/h2&gt;&#xA;&lt;p&gt;互联网传输的三个非常重要的特点：延时、丢包、抖动。&lt;/p&gt;&#xA;&lt;p&gt;延时和抖动天生就紧密相连，但它们其实并不同。延时是 &lt;em&gt;数据&lt;/em&gt; 从网络上的一个端点移动到另一个端点所花费的时间，这是一个受多种因素影响的复杂的值。另一方面，抖动是两个 &lt;em&gt;数据包&lt;/em&gt; 之间的延时差异。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
